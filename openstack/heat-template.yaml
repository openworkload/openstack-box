heat_template_version: 2013-05-23

description: >
  Sky Workflows heat templeate.

##

parameters:
  image:
    type: string
    description: Name or ID of image to use for the server
    constraints:
      - custom_constraint: glance.image

  flavor:
    type: string
    description: Name of flavor to use for the server
    constraints:
      - custom_constraint: nova.flavor

  key_name:
    type: string
    description: Name of key pair to use for the server
    constraints:
      - custom_constraint: nova.keypair

  public_net:
    type: string
    description: Name or ID of public network to use for the server
    constraints:
      - custom_constraint: neutron.network

  private_net_cidr:
    type: string
    description: Private network address (CIDR notation, i.e 10.0.0.0/24)

  private_net_gateway:
    type: string
    description: Private network gateway address

  private_net_pool_start:
    type: string
    description: Start of private network IP address allocation pool

  private_net_pool_end:
    type: string
    description: End of private network IP address allocation pool

  count:
    type: string
    description: Count of compute instances

##

resources:
  security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      name:
        str_replace:
          template: $STACK_NAME-security_group
          params:
            $STACK_NAME: { get_param: "OS::stack_name" }
      rules:
        - protocol: icmp
        - protocol: tcp
          port_range_min: 80
          port_range_max: 80
        - protocol: tcp
          port_range_min: 22
          port_range_max: 22


  private_net:
    type: OS::Neutron::Net
    properties:
      name:
        str_replace:
          template: $STACK_NAME-private_net
          params:
            $STACK_NAME: { get_param: "OS::stack_name" }

  private_subnet:
    type: OS::Neutron::Subnet
    properties:
      name:
        str_replace:
          template: $STACK_NAME-private_subnet
          params:
            $STACK_NAME: { get_param: "OS::stack_name" }
      network_id: { get_resource: private_net }
      cidr: { get_param: private_net_cidr }
      gateway_ip: { get_param: private_net_gateway }
      allocation_pools:
        - start: { get_param: private_net_pool_start }
          end: { get_param: private_net_pool_end }


  router:
    type: OS::Neutron::Router
    properties:
      name:
        str_replace:
          template: $STACK_NAME-router
          params:
            $STACK_NAME: { get_param: "OS::stack_name" }
      external_gateway_info:
        network: { get_param: public_net }

  router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet_id: { get_resource: private_subnet }


  master_instance_private_subnet_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: private_net }
      fixed_ips:
        - subnet_id: { get_resource: private_subnet }
      security_groups:
        - { get_resource: security_group }

  master_instance_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_net }
      port_id: { get_resource: master_instance_private_subnet_port }

  master_instance:
    type: OS::Nova::Server
    properties:
      name:
        str_replace:
          template: $STACK_NAME-master_instance
          params:
            $STACK_NAME: { get_param: "OS::stack_name" }
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: master_instance_private_subnet_port }


  compute_instances:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: count }
      resource_def:
        type: OS::Nova::Server
        properties:
          name:
            str_replace:
              template: $STACK_NAME-compute_instance-%index%
              params:
                $STACK_NAME: { get_param: "OS::stack_name" }
          image: { get_param: image }
          flavor: { get_param: flavor }
          key_name: { get_param: key_name }
          networks:
            - subnet: { get_resource: private_subnet }
          security_groups:
            - { get_resource: security_group }

##

outputs:
  master_instance_public_ip:
    description: IP address of master_instance in public network
    value: { get_attr: [master_instance_floating_ip, floating_ip_address] }
  master_instance_private_ip:
    description: IP address of master_instance in private network
    value: { get_attr: [master_instance, first_address] }

